# -*- coding: utf-8 -*-
"""Berita Lamtim .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tPigwhj9WA-ztoYXvkXpd18gT1Fj_Bmm

## ANALISIS PERSENTASE BERITA DI KABUPATEN LAMPUNG TIMUR TAHUN 2023 DENGAN  METODE DISTRIBUSI GASUSSIAN ##

Import Package
"""

import pandas as pd
import matplotlib.pyplot as plt

"""Import Data"""

df1 = pd.read_excel('Data Berita Lampung timur 2023.xlsx')
df1

import pandas as pd

# Mengasumsikan df1 adalah DataFrame input Anda
df = pd.DataFrame(df1)

# Normalisasi kata kunci dengan mengonversinya ke huruf kecil
def kategorikan_berita(judul):
    judul = judul.lower()
    if any(keyword in judul for keyword in ['penembak', 'pencuri', 'pembunuh', 'tersangka', 'maling', 'penipuan', 'pengeroyokan', 'pengedar','sebarkan foto tak pantas', 'judi', 'sabu', 'penculikan', 'cabuli', 'narkoba', 'bandit', 'tewas', 'asusila', 'miras', 'mayat', 'korupsi', 'curanmor', 'perburuan', 'buron', 'polres', 'penipuan', 'polsek', 'penculikan anak','begal', 'ilegal', 'motor', 'curi', 'menganiaya', 'kekerasan', 'penganiayaan', 'rampok', 'pemerasan', 'pemalsuan', 'pembobolan', 'keamanan']):
        return 'Kriminal'
    elif any(keyword in judul for keyword in ['politik', 'pemerintahan', 'kebijakan', 'pemilu', 'kpu', 'dprd', 'pilkades', 'dpd', 'uu', 'caleg', 'bupati', 'gubernur', 'pejabat', 'peraturan', 'komisi', 'legislatif', 'menteri', 'presiden', 'program pemerintah']):
        return 'Politik dan Pemerintahan'
    elif any(keyword in judul for keyword in ['masyarakat', 'sosial', 'bencana', 'lingkungan', 'angin', 'roboh', 'runtuh', 'hujan', 'iklim', 'bankir', 'pertanian', 'miskin', 'kebun', 'banjir','krisis', 'kerusuhan', 'pengungsian', 'sosialisasi', 'pemberdayaan masyarakat', 'pembangunan sosial', 'masalah keluarga', 'kegiatan kemasyarakatan']):
        return 'Sosial'
    elif any(keyword in judul for keyword in ['ekonomi', 'bisnis', 'pasar', 'keuangan', 'umkm', 'miskin', 'pangan', 'kerajinan', 'sembako', 'anggaran', 'inflasi', 'kredit', 'subsidi', 'industri', 'perdagangan', 'investasi', 'pajak', 'perbankan']):
        return 'Ekonomi'
    elif any(keyword in judul for keyword in ['kesehatan', 'medis', 'rumah sakit', 'dokter', 'rs', 'farmasi tanpa izin', 'rabies', 'stunting', 'vaksinasi', 'gizi', 'pil', 'psikotropika', 'pmi', 'obat', 'kesehatan mental', 'asuransi kesehatan', 'pandemi', 'covid-19', 'penyakit menular', 'klinik', 'pelayanan kesehatan', 'keselamatan kerja']):
        return 'Kesehatan'
    elif any(keyword in judul for keyword in ['pendidikan', 'sekolah', 'universitas', 'pelajar', 'santri', 'guru', 'mahasiswa', 'pendidikan dasar', 'pendidikan menengah', 'sertifikasi', 'beasiswa', 'akademi', 'pelatihan', 'kurikulum', 'ujian nasional']):
        return 'Pendidikan'
    elif any(keyword in judul for keyword in ['organik', 'satwa', 'pupuk', 'hewan', 'pemburu liar', 'deforestasi', 'konservasi', 'penanaman pohon', 'penghijauan', 'ekosistem', 'pertanian organik', 'pemuliaan tanaman']):
        return 'Flora dan Fauna'
    else:
        return 'Lainnya'

# Menerapkan fungsi ke kolom Judul_Berita
df['Kategori'] = df['Judul_Berita'].apply(kategorikan_berita)

# Menampilkan hasil
print(df)

df.head(50)

"""### EDA

#### Cleaning Data
"""

print(df.info())

# Mengecek ada nilai kosong atau tidak pada data
df.isnull().sum()

#Drop NA
df_dropNA = df.dropna()

print("Clean:\n",df_dropNA.isnull().sum())

"""#### Drop Unnecessary Column"""

df_dropColumn = df_dropNA

df_dropColumn.drop(columns='Waktu', inplace=True)

df_dropColumn.columns.tolist()

"""#### Check Duplicate Data"""

# Mengassign variabel baru dengan nilai data yang unik kepada kolom yang target
check_Judul_Berita = df_dropColumn['Judul_Berita'].unique()
check_Hari= df_dropColumn['Hari'].unique()
check_Tanggal = df_dropColumn['Tanggal'].unique()
check_Kategori = df_dropColumn['Kategori'].unique()
check_Bulan = df_dropColumn['Bulan'].unique()

# Mengecek variable apakah memiliki data yang duplikat atau tidak
def check_variable(x):
  are_all_different = all(x[i] != x[j] for i in range(len(x)) for j in range(i+1, len(x)))
  if are_all_different:
    print("All values in column are different.")
  else:
    print("There are duplicate values in " ,x, "column.")

print("Check Judul_Berita  :")
check_variable(check_Judul_Berita)
#//
print("\ncheck_hari")
check_variable(check_Hari)

print("\ncheck_Tanggal")
check_variable(check_Tanggal)

print("\ncheck_kategori")
check_variable(check_Kategori)

print("\ncheck_Bulan")
check_variable(check_Bulan)

check_Judul_Berita

check_Hari

check_Tanggal

check_Kategori

check_Bulan

"""#### Check How many crimes per type of crime"""

import pandas as pd

#membuat fungsi untuk melihat isi nilai dari variabel 'category'
crime_counts = df_dropColumn['Kategori'].value_counts()

print(crime_counts)

"""### Distribution Gaussian
**Melakukan perhitungan persentase tingkat jenis pelanggaran(category), berdasarkan tahun(Bulan) menggunakan distribusi gaussian**
"""

df_clean = df_dropColumn

from scipy.stats import norm

bulan_pelanggaran_kriminal = df_clean['Bulan'].unique()
persentase_kriminal = []

# Membuat variable 'jenis pelanggaran' dan 'total pelanggaran dalam setahun'
jenis_pelanggaran = df_clean['Kategori']
bulan_pelanggaran = df_clean['Bulan']

# Hitung parameter distribusi Gaussian (rata-rata dan deviasi standar)
mean = bulan_pelanggaran.mean()
std_deviation = bulan_pelanggaran.std()

# Membuat objek distribusi Gaussian
dist = norm(mean, std_deviation)

for bulan in bulan_pelanggaran_kriminal:
    data_bulan = df_clean[df_clean['Bulan'] == bulan]
    total_data_bulan = len(data_bulan)
    persentase = (data_bulan['Kategori'].value_counts() / total_data_bulan) * 100
    persentase_kriminal.append(persentase)

# Membuat DataFrame persentase
df_persentase = pd.concat(persentase_kriminal, axis=1, keys=bulan_pelanggaran_kriminal).T

# Membuat opsi penampilan untuk DataFrame agar output yang dihasilkan lebih rapi
pd.options.display.float_format = '{:.2f}%'.format

print("Persentase Jenis Pelanggaran Sesuai bulan Pelanggaran:")
df_persentase

import pandas as pd
from scipy.stats import norm

# Data yang diperlukan
bulan_pelanggaran_kriminal = df_clean['Bulan'].unique()
persentase_kriminal = []

# Hitung parameter distribusi Gaussian (rata-rata dan deviasi standar)
mean = df_clean['Bulan'].map(df_clean['Bulan'].value_counts()).mean()
std_deviation = df_clean['Bulan'].map(df_clean['Bulan'].value_counts()).std()

# Membuat objek distribusi Gaussian
dist = norm(mean, std_deviation)

for bulan in bulan_pelanggaran_kriminal:
    data_bulan = df_clean[df_clean['Bulan'] == bulan]
    total_data_bulan = len(data_bulan)
    if total_data_bulan > 0:
        persentase = (data_bulan['Kategori'].value_counts() / total_data_bulan) * 100
    else:
        persentase = pd.Series(dtype=float)  # Handle kasus jika tidak ada data untuk bulan tertentu
    persentase_kriminal.append(persentase)

# Membuat DataFrame persentase
df_persentase = pd.concat(persentase_kriminal, axis=1, keys=bulan_pelanggaran_kriminal).T.fillna(0)

# Mengatur format tampilan untuk DataFrame agar output lebih rapi
pd.options.display.float_format = '{:.2f}%'.format

print("Persentase Jenis Pelanggaran Sesuai Bulan Pelanggaran:")
print(df_persentase)

import pandas as pd
import matplotlib.pyplot as plt

# Data yang diperlukan (gunakan DataFrame df_persentase yang sudah dibuat sebelumnya)
# df_persentase = ...

# Plotting
plt.figure(figsize=(12, 10))

# Plot setiap jenis pelanggaran
for column in df_persentase.columns:
    plt.plot(df_persentase.index, df_persentase[column], marker='o', label=column)

plt.title('Persentase Jenis Pelanggaran per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Persentase (%)')
plt.xticks(rotation=45)
plt.legend(title='Jenis Pelanggaran')
plt.grid(True)
plt.tight_layout()

# Tampilkan plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Assuming df_persentase is already defined
# df_persentase = ...

# Plotting
plt.figure(figsize=(12, 10))

# Tentukan lebar batang
bar_width = 0.15

# Tentukan posisi untuk setiap jenis pelanggaran
index = np.arange(len(df_persentase))

# Plot setiap jenis pelanggaran sebagai diagram batang
for i, column in enumerate(df_persentase.columns):
    plt.bar(index + i * bar_width, df_persentase[column], bar_width, label=column)

plt.title('Persentase Jenis Pelanggaran per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Persentase (%)')
plt.xticks(index + bar_width * (len(df_persentase.columns) - 1) / 2, df_persentase.index, rotation=45)
plt.legend(title='Jenis Pelanggaran')
plt.grid(True, axis='y')
plt.tight_layout()

# Tampilkan plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Mengasumsikan df1 adalah DataFrame input Anda
df = pd.DataFrame(df)

# Fungsi untuk mengkategorikan berita
def kategorikan_berita(judul):
    judul = judul.lower()
    if any(keyword in judul for keyword in ['penembak', 'pencuri', 'pembunuh', 'tersangka', 'maling', 'penipuan', 'pengeroyokan', 'pengedar','sebarkan foto tak pantas', 'judi', 'sabu', 'penculikan', 'cabuli', 'narkoba', 'bandit', 'tewas', 'asusila', 'miras', 'mayat', 'korupsi', 'curanmor', 'perburuan', 'buron', 'polres', 'penipuan', 'polsek', 'penculikan anak','begal', 'ilegal', 'motor', 'curi']):
        return 'Kriminal'
    elif any(keyword in judul for keyword in ['politik', 'pemerintahan', 'kebijakan', 'pemilu', 'kpu', 'dprd', 'pilkades', 'dpd', 'uu', 'caleg', 'bupati']):
        return 'Politik dan Pemerintahan'
    elif any(keyword in judul for keyword in ['masyarakat', 'sosial', 'bencana', 'lingkungan', 'angin', 'roboh', 'runtuh', 'hujan', 'iklim', 'bankir', 'pertanian', 'miskin', 'kebun']):
        return 'Sosial'
    elif any(keyword in judul for keyword in ['ekonomi', 'bisnis', 'pasar', 'keuangan', 'umkm', 'miskin', 'pangan', 'kerajinan', 'sembako', 'anggaran']):
        return 'Ekonomi'
    elif any(keyword in judul for keyword in ['kesehatan', 'medis', 'rumah sakit', 'dokter', 'rs', 'farmasi tanpa izin', 'rabies', 'stunting', 'vaksinasi', 'gizi', 'pil', 'psikotropika', 'pmi']):
        return 'Kesehatan'
    elif any(keyword in judul for keyword in ['pendidikan', 'sekolah', 'universitas', 'pelajar', 'santri', 'guru', 'mahasiswa']):
        return 'Pendidikan'
    elif any(keyword in judul for keyword in ['organik', 'satwa', 'pupuk', 'hewan', 'pemburu liar']):
        return 'Flora dan Fauna'
    else:
        return 'Lainnya'

# Menerapkan fungsi ke kolom Judul_Berita
df['Kategori'] = df['Judul_Berita'].apply(kategorikan_berita)

# Menghitung jumlah artikel per kategori
kategori_counts = df['Kategori'].value_counts()

# Membuat diagram lingkaran
plt.figure(figsize=(10, 10))
plt.pie(kategori_counts, labels=kategori_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribusi Kategori Berita')
plt.show()

# === PIE CHART Distribusi Total Kategori Berita ===
import matplotlib.pyplot as plt

kategori_counts = df['Kategori'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(kategori_counts, labels=kategori_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribusi Kategori Berita Secara Keseluruhan')
plt.axis('equal')
plt.tight_layout()
plt.show()

# === BAR CHART Distribusi Kategori Berita per Bulan ===
import numpy as np

plt.figure(figsize=(12, 8))
bar_width = 0.12
index = np.arange(len(df_persentase))

for i, column in enumerate(df_persentase.columns):
    plt.bar(index + i * bar_width, df_persentase[column], bar_width, label=column)

plt.title('Persentase Kategori Berita per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Persentase (%)')
plt.xticks(index + bar_width * (len(df_persentase.columns) - 1) / 2, df_persentase.index, rotation=45)
plt.legend(title='Kategori')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
